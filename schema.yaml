openapi: 3.0.3
info:
  title: Rsvy APIs
  version: 0.0.1
  description: Reservation APIs
paths:
  /v1/auth/login/:
    post:
      operationId: auth_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfoTokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserInfoTokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserInfoTokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoTokenObtainPair'
          description: ''
  /v1/auth/token/refresh/:
    post:
      operationId: auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /v1/auth/token/verify/:
    post:
      operationId: auth_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /v1/reservations/:
    get:
      operationId: reservations_list
      parameters:
      - in: query
        name: all
        schema:
          type: boolean
          default: false
      - in: query
        name: from_time
        schema:
          type: string
          format: date
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - in: query
        name: table
        schema:
          type: integer
      - in: query
        name: to_time
        schema:
          type: string
          format: date
      tags:
      - reservations
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReservationList'
          description: ''
    post:
      operationId: reservations_create
      tags:
      - reservations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Reservation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Reservation'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
          description: ''
  /v1/reservations/{id}/:
    delete:
      operationId: reservations_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this reservation.
        required: true
      tags:
      - reservations
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /v1/tables/:
    get:
      operationId: tables_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - tables
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTableList'
          description: ''
    post:
      operationId: tables_create
      tags:
      - tables
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Table'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Table'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Table'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
          description: ''
  /v1/tables/{id}/:
    delete:
      operationId: tables_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this table.
        required: true
      tags:
      - tables
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /v1/tables/availability/:
    get:
      operationId: tables_availability_retrieve
      parameters:
      - in: query
        name: number_of_persons
        schema:
          type: integer
        required: true
      tags:
      - tables
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableAvailability'
          description: ''
  /v1/users/employees/:
    post:
      operationId: users_employees_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmployee'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateEmployee'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateEmployee'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEmployee'
          description: ''
components:
  schemas:
    CreateEmployee:
      type: object
      properties:
        employee_no:
          type: string
          title: Employee Number
          maxLength: 4
          minLength: 4
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        password:
          type: string
          maxLength: 128
      required:
      - employee_no
      - first_name
      - last_name
      - password
    PaginatedReservationList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Reservation'
    PaginatedTableList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Table'
    Reservation:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        from_time:
          type: string
          format: time
        to_time:
          type: string
          format: time
        table:
          type: integer
        persons:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
      required:
      - from_time
      - id
      - table
      - to_time
    Table:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        number:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Table Number
        number_of_seats:
          type: integer
          maximum: 12
          minimum: 1
          nullable: true
      required:
      - id
      - number
    TableAvailability:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        number:
          type: integer
          maximum: 2147483647
          minimum: 0
          title: Table Number
        number_of_seats:
          type: integer
          maximum: 12
          minimum: 1
          nullable: true
        for_date:
          type: string
          format: date
          default: '2022-04-15'
        availability:
          type: object
          additionalProperties: {}
          readOnly: true
      required:
      - availability
      - id
      - number
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    UserInfoTokenObtainPair:
      type: object
      properties:
        employee_no:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - employee_no
      - password
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
servers:
- url: http://127.0.0.1:8000
  description: DEV
